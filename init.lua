[[
Autoponics-Open, the open source version of Autoponics
Copyright (C) 2015  Andida Syahendar Dwi Putra

This template should be generated by generator.go
]]

-- Set wifi mode to access point only
wifi.setmode(wifi.SOFTAP)
wifi.ap.config({
	ssid = '{{SSID}}', -- must be randomized with signature AUTOPONICS-RANDOM6CHARSHERE
	pwd  = '{{PASSWORD}}', -- must be more than 8 characters and randomized
	auth = AUTH_WPA2_PSK,
	max  = 1 -- maximum of 1 connections only
})
wifi.ap.setip({
	ip 		= '192.168.1.1',
	netmask = '255.255.255.0',
	gateway = '192.168.1.1'
})

-- the receiver handler
local recvHandler = function(clientConn, requestPayload)
	-- only serve GET HTTP method
	local _, _, method, path, vars = string.find(requestPayload, '([A-Z]+) (.+)?(.+) HTTP')
	if (method == nil) then
		_, _, method, path = string.find(requestPayload, '([A-Z]+) (.+) HTTP')
	end

	-- check method, if not GET return 405
	if (method ~= 'GET')
		local response = '{"error":true,"code":405,"errorMessage":"Invalid method"}'
		clientConn:send(response)
		clientConn:close()
		collectgarbage()
		return
	end

	-- put all the query strings into a table
	local GET = {}
	if (vars ~= nil)then
		for k, v in string.gmatch(vars, "(%w+)=(%w+)&*") do
			GET[k] = v
		end
	end

	-- process here based on the GET table

	-- prepare the response
	local data = {}

	-- json data
	local response = cjson.encode(data)
	clientConn:send(response)
	clientConn:close()
	collectgarbage()
end

-- the connection handler
local connHandler = function(conn)
	conn:on('receive', recvHandler)
end

-- create the server with 30s timeout for inactive client
local srv = net.createServer(net.TCP, 30)
srv:listen(80, connHandler)